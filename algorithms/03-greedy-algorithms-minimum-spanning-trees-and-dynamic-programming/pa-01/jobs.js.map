{"version":3,"file":"jobs.js","sourceRoot":"","sources":["jobs.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as sourceMapSupport from 'source-map-support';\nimport BigNumber from 'bignumber.js';\nimport * as _ from 'lodash';\n\nsourceMapSupport.install();\n\nconst prod: boolean = true;\n\ninterface Job {\n  weight: number;\n  length: number;\n  diff?: number;\n  ratio?: number;\n  completionTime?: number;\n  weightedCompletionTime?: number;\n}\n\nfunction jobCompDiff(a: Job, b: Job): number {\n  if (a.diff > b.diff) {\n    return -1;\n  }\n  if (b.diff > a.diff) {\n    return 1;\n  }\n  if (a.weight > b.weight) {\n    return -1;\n  }\n  if (b.weight > a.weight) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction jobCompRatio(a: Job, b: Job): number {\n  if (a.ratio > b.ratio) {\n    return -1;\n  }\n  if (b.ratio > a.ratio) {\n    return 1;\n  }\n  return 0;\n}\n\nconst inputT: string = '5\\n1 2\\n2 3\\n5 4\\n4 1\\n6 5\\n7 2\\n';\nconst inputP: string = fs\n  .readFileSync(path.join(__dirname, '/jobs.txt'))\n  .toString();\nconst input: string = prod ? inputP.trim() : inputT.trim();\n\nconst [_unused, ...strJobs]: Array<string> = input.split('\\n');\n\nconst unsortedJobs: Array<Job> = strJobs.map((strJob) => {\n  const [w, l]: Array<string> = strJob.trim().split(' ');\n  const job: Job = {\n    weight: parseInt(w.trim(), 10),\n    length: parseInt(l.trim(), 10),\n  };\n  job.diff = job.weight - job.length;\n  job.ratio = job.weight / job.length;\n  return job;\n});\n\nconst jobsDiff = _.cloneDeep(unsortedJobs).sort(jobCompDiff);\nconst jobsRatio = _.cloneDeep(unsortedJobs).sort(jobCompRatio);\n\nlet totalWeightedCompletionTime: BigNumber = new BigNumber(0);\nlet currentCompletionTime: number = 0;\nlet i: number;\nfor (i = 0; i < jobsDiff.length; i++) {\n  jobsDiff[i].completionTime = currentCompletionTime + jobsDiff[i].length;\n  jobsDiff[i].weightedCompletionTime =\n    jobsDiff[i].completionTime * jobsDiff[i].weight;\n\n  currentCompletionTime = jobsDiff[i].completionTime;\n  const bigWeightedCompletionTime: BigNumber = new BigNumber(\n    jobsDiff[i].weightedCompletionTime,\n  );\n  totalWeightedCompletionTime = totalWeightedCompletionTime.plus(\n    bigWeightedCompletionTime,\n  );\n}\n\nconsole.log(totalWeightedCompletionTime.toString(10));\n\ntotalWeightedCompletionTime = new BigNumber(0);\ncurrentCompletionTime = 0;\nfor (i = 0; i < jobsRatio.length; i++) {\n  jobsRatio[i].completionTime = currentCompletionTime + jobsRatio[i].length;\n  jobsRatio[i].weightedCompletionTime =\n    jobsRatio[i].completionTime * jobsRatio[i].weight;\n\n  currentCompletionTime = jobsRatio[i].completionTime;\n  const bigWeightedCompletionTime: BigNumber = new BigNumber(\n    jobsRatio[i].weightedCompletionTime,\n  );\n  totalWeightedCompletionTime = totalWeightedCompletionTime.plus(\n    bigWeightedCompletionTime,\n  );\n}\n\nconsole.log(totalWeightedCompletionTime.toString(10));\n"]}