{"version":3,"file":"median.js","sourceRoot":"","sources":["median.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as sourceMapSupport from 'source-map-support';\nimport { Heap } from '../heap/heap';\n\nsourceMapSupport.install();\n\nfunction lt(a: number, b: number) {\n  return a < b;\n}\n\nfunction gt(a: number, b: number) {\n  return a > b;\n}\n\nclass Median {\n  heapHalfLargest: Heap;\n  heapHalfSmallest: Heap;\n\n  constructor() {\n    this.heapHalfLargest = new Heap(lt);\n    this.heapHalfSmallest = new Heap(gt);\n  }\n\n  getMedian(): number {\n    if (\n      this.heapHalfLargest.elements.length ===\n      this.heapHalfSmallest.elements.length\n    ) {\n      return this.heapHalfSmallest.elements[0];\n    }\n    return this.heapHalfLargest.elements.length >\n      this.heapHalfSmallest.elements.length\n      ? this.heapHalfLargest.elements[0]\n      : this.heapHalfSmallest.elements[0];\n  }\n\n  insertBalanced(element: number): void {\n    if (\n      this.heapHalfLargest.elements.length >\n      this.heapHalfSmallest.elements.length\n    ) {\n      this.heapHalfSmallest.insert(element);\n    } else {\n      this.heapHalfLargest.insert(element);\n    }\n  }\n\n  insert(element: number) {\n    if (element < this.heapHalfSmallest.elements[0]) {\n      this.heapHalfSmallest.insert(element);\n    } else if (element > this.heapHalfLargest.elements[0]) {\n      this.heapHalfLargest.insert(element);\n    } else {\n      this.insertBalanced(element);\n    }\n    this.balance();\n  }\n\n  private balance() {\n    if (\n      Math.abs(\n        this.heapHalfLargest.elements.length -\n          this.heapHalfSmallest.elements.length,\n      ) > 1\n    ) {\n      if (\n        this.heapHalfLargest.elements.length >\n        this.heapHalfSmallest.elements.length\n      ) {\n        this.heapHalfSmallest.insert(this.heapHalfLargest.pop());\n      } else {\n        this.heapHalfLargest.insert(this.heapHalfSmallest.pop());\n      }\n    }\n  }\n}\n\nconst prod: boolean = true;\nconst inputT: string =\n  '6331\\n2793\\n1640\\n9290\\n225\\n625\\n6195\\n2303\\n5685\\n1354\\n4292\\n7600\\n';\nconst inputP: string = fs\n  .readFileSync(path.join(__dirname, 'median.txt'))\n  .toString();\nconst input: string = prod ? inputP : inputT;\nconst numbers: Array<number> = input\n  .trim()\n  .split('\\n')\n  .map((line: string): number => {\n    return parseInt(line.trim(), 10);\n  });\n\nconst median = new Median();\nlet answer = 0;\nfor (const n of numbers) {\n  median.insert(n);\n  answer = (answer + median.getMedian()) % 10000;\n}\n\nconsole.log(answer);\n"]}