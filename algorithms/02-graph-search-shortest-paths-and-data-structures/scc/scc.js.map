{"version":3,"file":"scc.js","sourceRoot":"","sources":["scc.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as sourceMapSupport from 'source-map-support';\n\nsourceMapSupport.install();\n\nclass Graph {\n  vertices: Array<Array<number>>;\n  reverse: Array<Array<number>>;\n  explored: Record<number, boolean>;\n  leader: Record<number, Array<number>>;\n  finish: Array<number>;\n  currentLeader: number;\n  time: number;\n\n  constructor() {\n    this.vertices = [];\n    this.reverse = [];\n    this.finish = [];\n    this.init();\n  }\n\n  init() {\n    this.leader = {};\n    this.time = 0;\n    this.currentLeader = null;\n    this.explored = {};\n  }\n}\n\nconst prod: boolean = true;\nconst inputT: string =\n  '7 1\\n5 2\\n9 3\\n1 4\\n8 5\\n3 6\\n8 6\\n4 7\\n9 7\\n2 8\\n6 9\\n';\nconst inputP: string = fs.readFileSync('./scc.txt').toString();\nconst input: string = prod ? inputP.trim() : inputT.trim();\nconst lines: Array<string> = input.split('\\n');\nconst graph: Graph = new Graph();\nfor (const line of lines) {\n  const [strSrc, strDst]: Array<string> = line.trim().split(' ');\n  const [src, dst]: Array<number> = [\n    parseInt(strSrc, 10),\n    parseInt(strDst, 10),\n  ];\n  graph.vertices[src] = graph.vertices[src] ?? [];\n  graph.vertices[src].push(dst);\n  graph.reverse[dst] = graph.reverse[dst] ?? [];\n  graph.reverse[dst].push(src);\n}\n\nfunction dfs(g: Graph, vertex: number, reverse: boolean): void {\n  g.explored[vertex] = true;\n  g.leader[g.currentLeader] = g.leader[g.currentLeader] ?? [];\n  g.leader[g.currentLeader].push(vertex);\n  let vertices: Array<number> = reverse\n    ? g.reverse[vertex]\n    : g.vertices[vertex];\n  vertices = vertices || [];\n  for (const j of vertices) {\n    if (!g.explored[j]) {\n      dfs(g, j, reverse);\n    }\n  }\n  g.time++;\n  if (reverse) {\n    g.finish[g.time] = vertex;\n  }\n}\n\nconst n: number = graph.vertices.length - 1;\n\nfor (let i: number = n; i >= 1; i--) {\n  if (!graph.explored[i]) {\n    graph.currentLeader = i;\n    dfs(graph, i, true);\n  }\n}\n\ngraph.init();\nfor (let i: number = n; i >= 1; i--) {\n  if (!graph.explored[graph.finish[i]]) {\n    graph.currentLeader = graph.finish[i];\n    dfs(graph, graph.finish[i], false);\n  }\n}\n\nconst lengths: Array<number> = Object.values(graph.leader).map(\n  (arr: Array<number>): number => {\n    return arr.length;\n  },\n);\n\nconsole.log(\n  lengths.sort((a: number, b: number): number => {\n    return b - a;\n  }),\n);\n"]}