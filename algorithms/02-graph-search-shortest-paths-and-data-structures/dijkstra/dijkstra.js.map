{"version":3,"file":"dijkstra.js","sourceRoot":"","sources":["dijkstra.ts"],"names":[],"mappings":";;AAAA,yBAAyB;AACzB,uDAAuD;AAEvD,gBAAgB,CAAC,OAAO,EAAE,CAAC;AAE3B,MAAM,KAAK;IAKT;QACE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,GAAW,EAAE,GAAW,EAAE,GAAW;;QAC1C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACxB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,MAAA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,mCAAI,EAAE,CAAC;SACzC;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACxB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,MAAA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,mCAAI,EAAE,CAAC;SACzC;QACD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;IAC7B,CAAC;IAED,QAAQ,CAAC,GAAW;QAClB,MAAM,SAAS,GAAkB,CAAC,GAAG,CAAC,CAAC;QACvC,MAAM,YAAY,GAAkB,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEvD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC3B,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAElD,OAAO,SAAS,CAAC,MAAM,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YAChD,IAAI,GAAG,GAAW,MAAM,CAAC,gBAAgB,CAAC;YAC1C,IAAI,SAAS,GAAW,IAAI,CAAC;YAC7B,KAAK,MAAM,CAAC,IAAI,SAAS,EAAE;gBACzB,MAAM,YAAY,GAAW,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBAClD,KAAK,MAAM,CAAC,IAAI,YAAY,EAAE;oBAC5B,MAAM,GAAG,GAAW,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrC,IAAI,YAAY,KAAK,SAAS,IAAI,GAAG,KAAK,SAAS,EAAE;wBACnD,IAAI,GAAG,GAAG,YAAY,GAAG,GAAG,EAAE;4BAC5B,GAAG,GAAG,YAAY,GAAG,GAAG,CAAC;4BACzB,SAAS,GAAG,CAAC,CAAC;yBACf;qBACF;iBACF;aACF;YAED,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;YACnC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC1B,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;SACzD;IACH,CAAC;CACF;AAED,MAAM,IAAI,GAAY,IAAI,CAAC;AAC3B,MAAM,MAAM,GAAW,kCAAkC,CAAC;AAC1D,MAAM,MAAM,GAAW,EAAE,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,QAAQ,EAAE,CAAC;AACpE,MAAM,KAAK,GAAW,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;AAC3D,MAAM,KAAK,GAAkB,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC/C,MAAM,KAAK,GAAU,IAAI,KAAK,EAAE,CAAC;AAEjC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;IACxB,MAAM,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,GAAkB,IAAI;SAC7C,IAAI,EAAE;SACN,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC5B,MAAM,GAAG,GAAW,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IACzC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;QAC5B,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAkB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC7D,MAAM,GAAG,GAAW,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QACzC,MAAM,MAAM,GAAW,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAC/C,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;KAChC;CACF;AAED,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAClB,MAAM,OAAO,GAAkB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAC5E,MAAM,MAAM,GAAkB,OAAO,CAAC,GAAG,CAAC,CAAC,MAAc,EAAU,EAAE;IACnE,OAAO,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC;AACH,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC","sourcesContent":["import * as fs from 'fs';\nimport * as sourceMapSupport from 'source-map-support';\n\nsourceMapSupport.install();\n\nclass Graph {\n  vertices: Array<number>;\n  edges: Record<number, Record<number, number>>;\n  shortestPath: Record<number, number>;\n\n  constructor() {\n    this.vertices = [];\n    this.edges = {};\n    this.shortestPath = {};\n  }\n\n  insert(src: number, dst: number, len: number) {\n    if (!this.vertices.includes(src)) {\n      this.vertices.push(src);\n      this.edges[src] = this.edges[src] ?? {};\n    }\n    if (!this.vertices.includes(dst)) {\n      this.vertices.push(dst);\n      this.edges[dst] = this.edges[dst] ?? {};\n    }\n    this.edges[src][dst] = len;\n  }\n\n  dijkstra(src: number) {\n    const processed: Array<number> = [src];\n    const notProcessed: Array<number> = [...this.vertices];\n\n    this.shortestPath[src] = 0;\n    notProcessed.splice(notProcessed.indexOf(src), 1);\n\n    while (processed.length !== this.vertices.length) {\n      let min: number = Number.MAX_SAFE_INTEGER;\n      let newVertex: number = null;\n      for (const v of processed) {\n        const shortestPath: number = this.shortestPath[v];\n        for (const w of notProcessed) {\n          const len: number = this.edges[v][w];\n          if (shortestPath !== undefined && len !== undefined) {\n            if (min > shortestPath + len) {\n              min = shortestPath + len;\n              newVertex = w;\n            }\n          }\n        }\n      }\n\n      this.shortestPath[newVertex] = min;\n      processed.push(newVertex);\n      notProcessed.splice(notProcessed.indexOf(newVertex), 1);\n    }\n  }\n}\n\nconst prod: boolean = true;\nconst inputT: string = '1  2,1 3,4\\n2  3,2 4,6\\n3  4,3\\n';\nconst inputP: string = fs.readFileSync('./dijkstra.txt').toString();\nconst input: string = prod ? inputP.trim() : inputT.trim();\nconst lines: Array<string> = input.split('\\n');\nconst graph: Graph = new Graph();\n\nfor (const line of lines) {\n  const [srcStr, ...strDsts]: Array<string> = line\n    .trim()\n    .split(/[^0-9,][^0-9,]*/);\n  const src: number = parseInt(srcStr, 10);\n  for (const strDst of strDsts) {\n    const [dstStr, dstLength]: Array<string> = strDst.split(',');\n    const dst: number = parseInt(dstStr, 10);\n    const length: number = parseInt(dstLength, 10);\n    graph.insert(src, dst, length);\n  }\n}\n\ngraph.dijkstra(1);\nconst targets: Array<number> = [7, 37, 59, 82, 99, 115, 133, 165, 188, 197];\nconst answer: Array<number> = targets.map((target: number): number => {\n  return graph.shortestPath[target];\n});\nconsole.log(answer.join(','));\n"]}